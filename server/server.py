"""–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
import logging
import os
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
import uvicorn
from starlette.responses import JSONResponse


from .config import settings, validate_required_env_vars
from .api.api_implementation import router
from server.database.db_con import init_database, close_database_pool

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL.upper()),
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("unisite.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ UniSite API...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    try:
        await init_database()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

    yield

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ UniSite API...")
    try:
        await close_database_pool()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="UniSite API",
    description="API –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ UniSite - —É—á–µ–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    version="0.1.0",
    docs_url="/docs",  # Swagger UI
    redoc_url="/redoc",  # ReDoc
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(router)
app.mount("/static", StaticFiles(directory="static"), name="static")

# –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É index.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "index.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>index.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")


@app.get("/register", response_class=HTMLResponse)
async def register_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É register.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "register.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>register.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")



@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É login.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "login.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>login.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")

# @app.get('/favicon.ico', include_in_schema=False)
# async def favicon():
#     return FileResponse(os.path.join("client", "favicon.ico"))

@app.get("/dashboard", response_class=HTMLResponse)
async def dashboard_page():
    """–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É login.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "dashboard.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>dashboard.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")

@app.get("/addWork", response_class=HTMLResponse)
async def addWork_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É addWorks.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "addWork.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>addWorks.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")



@app.get("/works/{work_id}", response_class=HTMLResponse)
async def view_work_page(work_id: int):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É viewWork.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "viewWork.html")

        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()

        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å work_id –≤ HTML –∫–∞–∫ –º–µ—Ç–∞—Ç–µ–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ JavaScript
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å work_id –≤ head —Å–µ–∫—Ü–∏—é
        work_id_script = f'<script>window.WORK_ID = {work_id};</script>'

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º </head>
        if '</head>' in html_content:
            html_content = html_content.replace('</head>', f'{work_id_script}\n</head>')
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–∞ head, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ body
            html_content = html_content.replace('<body>', f'<body>\n{work_id_script}')

        return HTMLResponse(content=html_content)

    except FileNotFoundError:
        return HTMLResponse(
            content=f"<h1>UniSite API</h1><p>viewWork.html not found</p><p>Work ID: {work_id}</p>",
            status_code=404
        )
    except Exception as e:
        return HTMLResponse(
            content=f"<h1>UniSite API</h1><p>Error: {e}</p><p>Work ID: {work_id}</p>",
            status_code=500
        )

@app.get("/edit-profile", response_class=HTMLResponse)
async def edit_profile_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É editProfile.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "editProfile.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>editProfile.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")


@app.get("/moderation", response_class=HTMLResponse)
async def moderation_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É moderation.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "moderation.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>moderation.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")


@app.get("/admin", response_class=HTMLResponse)
async def admin_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É admin.html
        current_dir = os.path.dirname(__file__)
        html_path = os.path.join(current_dir, "..", "client", "admin.html")
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        return HTMLResponse(content="<h1>UniSite API</h1><p>admin.html not found</p>")
    except Exception as e:
        return HTMLResponse(content=f"<h1>UniSite API</h1><p>Error: {e}</p>")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@app.get("/status")
async def get_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "running",
        "service": "UniSite API",
        "version": "0.1.0"
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(404)
async def not_found_handler(request, exc):
    return JSONResponse(
        status_code=404,
        content={
            "error": "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "message": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL",
            "available_endpoints": [
                "/",
                "/status",
                "/api",
                "/docs",
                "/redoc"
            ]
        }
    )


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not validate_required_env_vars():
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        exit(1)

    logger.info(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ http://{settings.HOST}:{settings.PORT}")
    logger.info(f"üìä –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.DEBUG}")
    logger.info(f"üóÉÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DB_HOST}:{settings.DB_PORT}/{settings.DB_NAME}")

    uvicorn.run(
        "server.server:app",
        host=settings.HOST,
        port=settings.PORT,
        reload=settings.DEBUG,  # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        log_level=settings.LOG_LEVEL.lower()
    )
